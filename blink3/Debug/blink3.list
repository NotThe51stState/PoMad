
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000380  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00001380  2**0
                  CONTENTS
  4 .ARM          00000000  08000378  08000378  00001380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000378  08000380  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00001378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800037c  0800037c  0000137c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000380  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000380  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000733  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000238  00000000  00000000  00001add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00001d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000089  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b40  00000000  00000000  00001e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b85  00000000  00000000  0001a9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b216  00000000  00000000  0001b536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a674c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c0  00000000  00000000  000a6790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000a6950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000360 	.word	0x08000360

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000360 	.word	0x08000360

08000204 <main>:
 *  Created on: Jun 2, 2025
 *      Author: Paul
 */

#include "stm32f446xx.h"
int main() {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	uint32_t i;

	// Start GPIOA clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <main+0x4c>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020e:	4a10      	ldr	r2, [pc, #64]	@ (8000250 <main+0x4c>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6313      	str	r3, [r2, #48]	@ 0x30
	//RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8000216:	4b0f      	ldr	r3, [pc, #60]	@ (8000254 <main+0x50>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a0e      	ldr	r2, [pc, #56]	@ (8000254 <main+0x50>)
 800021c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000220:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <main+0x50>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0b      	ldr	r2, [pc, #44]	@ (8000254 <main+0x50>)
 8000228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800022c:	6013      	str	r3, [r2, #0]

	while(1) {
		// LED toggle
		GPIOA->ODR ^= GPIO_ODR_ODR_5;
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <main+0x50>)
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <main+0x50>)
 8000234:	f083 0320 	eor.w	r3, r3, #32
 8000238:	6153      	str	r3, [r2, #20]
		//GPIOA->ODR ^= GPIO_ODR_5;

		// Wait
		for(i=0; i<100000; i++);
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e002      	b.n	8000246 <main+0x42>
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3301      	adds	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a03      	ldr	r2, [pc, #12]	@ (8000258 <main+0x54>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d9f8      	bls.n	8000240 <main+0x3c>
		GPIOA->ODR ^= GPIO_ODR_ODR_5;
 800024e:	e7ee      	b.n	800022e <main+0x2a>
 8000250:	40023800 	.word	0x40023800
 8000254:	40020000 	.word	0x40020000
 8000258:	0001869f 	.word	0x0001869f

0800025c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800026c:	bf00      	nop
 800026e:	e7fd      	b.n	800026c <HardFault_Handler+0x4>

08000270 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000274:	bf00      	nop
 8000276:	e7fd      	b.n	8000274 <MemManage_Handler+0x4>

08000278 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <BusFault_Handler+0x4>

08000280 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <UsageFault_Handler+0x4>

08000288 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr

08000294 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  //HAL_IncTick();
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80002f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002bc:	f000 f825 	bl	800030a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	@ (80002f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80002e6:	f000 f817 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002ea:	f7ff ff8b 	bl	8000204 <main>
  bx  lr    
 80002ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>

0800030a <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	4d0d      	ldr	r5, [pc, #52]	@ (8000350 <__libc_init_array+0x38>)
 800031c:	4c0d      	ldr	r4, [pc, #52]	@ (8000354 <__libc_init_array+0x3c>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	2600      	movs	r6, #0
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	4d0b      	ldr	r5, [pc, #44]	@ (8000358 <__libc_init_array+0x40>)
 800032a:	4c0c      	ldr	r4, [pc, #48]	@ (800035c <__libc_init_array+0x44>)
 800032c:	f000 f818 	bl	8000360 <_init>
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	2600      	movs	r6, #0
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
